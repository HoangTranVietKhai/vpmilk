# from django.db import models
# from django.contrib.auth.models import User
# import store.models



# # Model Kh√°ch h√†ng
# class Customer(models.Model):
#     user = models.OneToOneField(User, null=True, blank=True, on_delete=models.CASCADE)
#     name = models.CharField(max_length=200, null=True)
#     email = models.CharField(max_length=200)

#     def __str__(self):
#         return self.name if self.name else "Kh√°ch h√†ng ch∆∞a ƒë·∫∑t t√™n"


# # Model S·∫£n ph·∫©m
# class Product(models.Model):
#     name = models.CharField(max_length=200)
#     price = models.DecimalField(max_digits=10, decimal_places=2)  
#     stock = models.IntegerField(default=0)
#     digital = models.BooleanField(default=False, null=True, blank=True)
#     image = models.ImageField(null=True, blank=True)

#     def __str__(self):
#         return self.name

#     # @property
#     # def price_vnd(self):
#     #     """Chuy·ªÉn ƒë·ªïi gi√° t·ª´ USD sang VND khi hi·ªÉn th·ªã"""
#     #     exchange_rate = 24000 
#     #     return self.price * exchange_rate

#     @property
#     def imageURL(self):
#         try:
#             url = self.image.url
#         except:
#             url = ''
#         return url

# # Model ƒê∆°n h√†ng
# class Order(models.Model):
#     customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True, blank=True)
#     date_ordered = models.DateTimeField(auto_now_add=True)
#     complete = models.BooleanField(default=False)
#     transaction_id = models.CharField(max_length=100, null=True)

#     def __str__(self):
#         return f"ƒê∆°n h√†ng {self.id}"

#     @property
#     def shipping(self):
#         """Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ c·∫ßn giao h√†ng kh√¥ng"""
#         return any(not item.product.digital for item in self.orderitem_set.all() if item.product)

#     @property
#     def get_cart_total(self):
#         return sum(item.get_total for item in self.orderitem_set.all())

#     @property
#     def get_cart_items(self):
#         return sum(item.quantity for item in self.orderitem_set.all())

# # Model S·∫£n ph·∫©m trong ƒë∆°n h√†ng
# class OrderItem(models.Model):
#     order = models.ForeignKey(Order, on_delete=models.CASCADE, default=49)  # Kh√¥ng ƒë·ªÉ null ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu
#     product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)
#     quantity = models.IntegerField(default=1)
#     date_added = models.DateTimeField(auto_now_add=True)

#     def __str__(self):
#         return f"{self.product.name if self.product else 'Kh√¥ng c√≥ s·∫£n ph·∫©m'} - {self.quantity} s·∫£n ph·∫©m"

#     @property
#     def get_total(self):
#         return self.product.price * self.quantity if self.product else 0

# # Model Gi·ªè h√†ng
# class CartItem(models.Model):
#     product = models.ForeignKey(Product, on_delete=models.CASCADE, null=True)
#     customer = models.ForeignKey(Customer, on_delete=models.CASCADE, null=True)
#     quantity = models.IntegerField(default=1)
#     date_added = models.DateTimeField(auto_now_add=True)

#     def __str__(self):
#         return f"{self.product.name} ({self.quantity})"

#     @property
#     def get_total(self):
#         return self.product.price * self.quantity if self.product else 0

# class OrderHistory(models.Model):
#     customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
#     total_price = models.DecimalField(max_digits=10, decimal_places=2)
#     transaction_id = models.CharField(max_length=200, null=True)
#     created_at = models.DateTimeField()
#     deleted_at = models.DateTimeField(auto_now_add=True)

#     def __str__(self):
#         return f"L·ªãch s·ª≠ ƒë∆°n h√†ng {self.transaction_id}"

# # Model ƒê·ªãa ch·ªâ giao h√†ng
# class ShippingAddress(models.Model):
#     customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True)
#     order = models.ForeignKey(Order, on_delete=models.CASCADE)  # R√†ng bu·ªôc ƒë·ªÉ tr√°nh l·ªói d·ªØ li·ªáu
#     address = models.CharField(max_length=255, default="Ch∆∞a c√≥ ƒë·ªãa ch·ªâ")
#     city = models.CharField(max_length=100)
#     state = models.CharField(max_length=100)
#     zipcode = models.CharField(max_length=20)
#     date_added = models.DateTimeField(auto_now_add=True)

#     def __str__(self):
#         return f"{self.address}, {self.city}"
from django.db import models
from django.contrib.auth.models import User
from django.conf import settings
from django.contrib.auth.forms import UserCreationForm


# üîπ Model Kh√°ch h√†ng
class Customer(models.Model):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,  # S·ª≠ d·ª•ng settings.AUTH_USER_MODEL
        on_delete=models.CASCADE,
        null=True,
        blank=True
    )
    name = models.CharField(max_length=200, default='Kh√°ch h√†ng')
    email = models.EmailField()


# üîπ Model S·∫£n ph·∫©m
class Product(models.Model):
    name = models.CharField(max_length=200)
    price = models.DecimalField(max_digits=10, decimal_places=2)  
    stock = models.IntegerField(default=0)
    digital = models.BooleanField(default=False, null=True, blank=True)
    image = models.ImageField(null=True, blank=True)

    def __str__(self):
        return self.name

    @property
    def imageURL(self):
        return self.image.url if self.image else ''


# üîπ Model ƒê∆°n h√†ng
class Order(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True, blank=True)
    date_ordered = models.DateTimeField(auto_now_add=True)
    complete = models.BooleanField(default=False)
    transaction_id = models.CharField(max_length=100, null=True)

    def __str__(self):
        return f"ƒê∆°n h√†ng {self.id}"

    @property
    def shipping(self):
        return any(not item.product.digital for item in self.orderitem_set.all() if item.product)

    @property
    def get_cart_total(self):
        return sum(item.get_total for item in self.orderitem_set.all())

    @property
    def get_cart_items(self):
        return sum(item.quantity for item in self.orderitem_set.all())


# üîπ Model S·∫£n ph·∫©m trong ƒë∆°n h√†ng
class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)
    quantity = models.IntegerField(default=1)
    date_added = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.product.name if self.product else 'Kh√¥ng c√≥ s·∫£n ph·∫©m'} - {self.quantity} s·∫£n ph·∫©m"

    @property
    def get_total(self):
        return self.product.price * self.quantity if self.product else 0
class OrderHistory(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    total_price = models.DecimalField(max_digits=10, decimal_places=2)
    transaction_id = models.CharField(max_length=200, null=True)
    created_at = models.DateTimeField()
    deleted_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"L·ªãch s·ª≠ ƒë∆°n h√†ng {self.transaction_id}"


# üîπ Model ƒê·ªãa ch·ªâ giao h√†ng
class ShippingAddress(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True)
    order = models.ForeignKey(Order, on_delete=models.CASCADE)  
    address = models.CharField(max_length=255, default="Ch∆∞a c√≥ ƒë·ªãa ch·ªâ")
    city = models.CharField(max_length=100)
    state = models.CharField(max_length=100)
    zipcode = models.CharField(max_length=20)
    date_added = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.address}, {self.city}"
